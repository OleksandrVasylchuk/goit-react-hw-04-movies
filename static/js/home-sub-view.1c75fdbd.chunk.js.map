{"version":3,"sources":["views/MovieDetailsPage.js"],"names":["CastView","lazy","ReviewsView","HomeSubView","useRouteMatch","url","path","moviesId","useParams","location","useLocation","history","useHistory","useState","movie","setMovie","setError","useEffect","themoviedbAPI","then","data","catch","error","type","className","styles","button","onClick","push","state","from","movies","src","poster_path","noImageAv","alt","title","width","about","vote_average","overview","descr","genres","map","item","index","genresName","name","navigation","information","to","pathname","link","activeClassName","activeLink","fallback","color","height","timeout","loader"],"mappings":"kRAeMA,EAAWC,gBAAK,kBACpB,gCAGIC,EAAcD,gBAAK,kBACvB,gCAGa,SAASE,IACtB,MAAsBC,cAAdC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,KACLC,EAAaC,cAAbD,SACFE,EAAWC,cACXC,EAAUC,cAChB,EAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,MAAnC,mBAAcG,GAAd,WAEAC,qBAAU,WACRC,IACiBX,GACdY,MAAK,SAACC,GACLL,EAASK,MAEVC,OAAM,SAACC,GAAD,OAAWN,EAASM,QAC5B,CAACf,IAMJ,OACE,mCACGO,GACC,qCACE,wBAAQS,KAAK,SAASC,UAAWC,IAAOC,OAAQC,QARvC,WAAO,IAAD,MACrBhB,EAAQiB,KAAR,iBAAanB,QAAb,IAAaA,GAAb,UAAaA,EAAUoB,aAAvB,iBAAa,EAAiBC,YAA9B,aAAa,EAAuBrB,gBAApC,QAAgD,YAO1C,4BAGA,sBAAKe,UAAWC,IAAOM,OAAvB,UACE,qBACEC,IACElB,EAAMmB,YAAN,0CACuCnB,EAAMmB,aACzCC,IAENC,IAAKrB,EAAMsB,MACXC,MAAM,QAER,sBAAKb,UAAWC,IAAOa,MAAvB,UACE,6BAAKxB,EAAMsB,QACX,6CAAqC,GAArBtB,EAAMyB,aAAtB,OACA,oBAAGf,UAAWC,IAAOe,SAArB,qBAEE,sBAAMhB,UAAWC,IAAOgB,MAAxB,SAAgC3B,EAAM0B,cAEvC1B,EAAM4B,QACL,qCACE,mBAAGlB,UAAWC,IAAOiB,OAArB,oBACC5B,EAAM4B,OAAOC,KAAI,SAACC,EAAMC,GAAP,OAChB,sBAAMrB,UAAWC,IAAOqB,WAAxB,SACGF,EAAKG,MADiCF,eASnD,sBAAKrB,UAAWC,IAAOuB,WAAvB,UACE,mBAAGxB,UAAWC,IAAOwB,YAArB,oCAEA,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAK9C,EAAL,SACRwB,MAAO,CAAEC,KAAM,CAAErB,cAEnBe,UAAWC,IAAO2B,KAClBC,gBAAiB5B,IAAO6B,WAN1B,kBAWA,cAAC,IAAD,CACEJ,GAAI,CACFC,SAAS,GAAD,OAAK9C,EAAL,YACRwB,MAAO,CAAEC,KAAM,CAAErB,cAEnBe,UAAWC,IAAO2B,KAClBC,gBAAiB5B,IAAO6B,WAN1B,wBAYF,cAAC,WAAD,CACEC,SACE,cAAC,IAAD,CACEhC,KAAK,UACLiC,MAAM,UACNC,OAAQ,IACRpB,MAAO,IACPqB,QAAS,IACTlC,UAAWC,IAAOkC,SARxB,SAYE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOrD,KAAI,UAAKA,EAAL,kBAAX,SACE,cAACN,EAAD,CAAUO,SAAUA,MAGtB,cAAC,IAAD,CAAOD,KAAI,UAAKA,EAAL,qBAAX,SACE,cAACJ,EAAD,CAAaK,SAAUA","file":"static/js/home-sub-view.1c75fdbd.chunk.js","sourcesContent":["import { useState, useEffect, lazy, Suspense } from \"react\";\nimport {\n  useParams,\n  NavLink,\n  useRouteMatch,\n  Route,\n  Switch,\n  useLocation,\n  useHistory,\n} from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\nimport * as themoviedbAPI from \"../services/movieteka-api\";\nimport noImageAv from \"../Image/noImageAvailable.jpg\";\nimport styles from \"./Views.module.css\";\n\nconst CastView = lazy(() =>\n  import(\"./Cast\" /* webpackChunkName: \"cast-view\" */)\n);\n\nconst ReviewsView = lazy(() =>\n  import(\"./Reviews\" /* webpackChunkName: \"review-view\" */)\n);\n\nexport default function HomeSubView() {\n  const { url, path } = useRouteMatch();\n  const { moviesId } = useParams();\n  const location = useLocation();\n  const history = useHistory();\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    themoviedbAPI\n      .getMoviesById(moviesId)\n      .then((data) => {\n        setMovie(data);\n      })\n      .catch((error) => setError(error));\n  }, [moviesId]);\n\n  const onGoBack = () => {\n    history.push(location?.state?.from?.location ?? \"/movies\");\n  };\n\n  return (\n    <>\n      {movie && (\n        <>\n          <button type=\"button\" className={styles.button} onClick={onGoBack}>\n            â¬… Go back\n          </button>\n          <div className={styles.movies}>\n            <img\n              src={\n                movie.poster_path\n                  ? `https://image.tmdb.org/t/p/w500/${movie.poster_path}`\n                  : noImageAv\n              }\n              alt={movie.title}\n              width=\"250\"\n            />\n            <div className={styles.about}>\n              <h1>{movie.title}</h1>\n              <p>User Score: {movie.vote_average * 10}%</p>\n              <p className={styles.overview}>\n                Overview\n                <span className={styles.descr}>{movie.overview}</span>\n              </p>\n              {movie.genres && (\n                <>\n                  <p className={styles.genres}>Genres</p>\n                  {movie.genres.map((item, index) => (\n                    <span className={styles.genresName} key={index}>\n                      {item.name}\n                    </span>\n                  ))}\n                </>\n              )}\n            </div>\n          </div>\n\n          <nav className={styles.navigation}>\n            <p className={styles.information}>Additional information</p>\n\n            <NavLink\n              to={{\n                pathname: `${url}/cast`,\n                state: { from: { location } },\n              }}\n              className={styles.link}\n              activeClassName={styles.activeLink}\n            >\n              Cast\n            </NavLink>\n\n            <NavLink\n              to={{\n                pathname: `${url}/reviews`,\n                state: { from: { location } },\n              }}\n              className={styles.link}\n              activeClassName={styles.activeLink}\n            >\n              Reviews\n            </NavLink>\n          </nav>\n\n          <Suspense\n            fallback={\n              <Loader\n                type=\"Circles\"\n                color=\"#00BFFF\"\n                height={100}\n                width={100}\n                timeout={3000} //3 secs\n                className={styles.loader}\n              />\n            }\n          >\n            <Switch>\n              <Route path={`${path}:moviesId/cast`}>\n                <CastView moviesId={moviesId} />\n              </Route>\n\n              <Route path={`${path}:moviesId/reviews`}>\n                <ReviewsView moviesId={moviesId} />\n              </Route>\n            </Switch>\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}